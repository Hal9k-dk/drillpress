---
- name: Install iptables-persistent
  apt:
    name: iptables-persistent
    update_cache: "yes"

- name: Enable iptables service
  ansible.builtin.systemd:
    name: iptables.service
    enabled: "yes"
    state: started

- name: Flush INPUT chain
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    flush: "yes"
    ip_version: "{{ item }}"
  loop:
    - ipv4
    - ipv6

- name: Accept loopback trafic
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    in_interface: lo
    jump: ACCEPT
    ip_version: "{{ item }}"
  loop:
    - ipv4
    - ipv6

- name: Allow establised, related and untracked connections
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    ctstate:
      - RELATED
      - ESTABLISHED
      - UNTRACKED
    jump: ACCEPT
    ip_version: "{{ item }}"
  loop:
    - ipv4
    - ipv6

- name: Drop connnections with invalid tracking
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    ctstate:
      - INVALID
    jump: DROP
    ip_version: "{{ item }}"
  loop:
    - ipv6
    - ipv6

- name: Accept safe IPv4 ICMP
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    protocol: icmp
    icmp_type: "{{ item.type }}"
    comment: "{{ item.comment }}"
    jump: ACCEPT
  loop:
    - {type: "3", comment: "ICMP public Destination Unreachable"}
    - {type: "4", comment: "ICMP source-quench"}
    - {type: "8", comment: "ICMP echo-request"}
    - {type: "11", comment: "ICMP time-exceeded"}
    - {type: "12", comment: "ICMP parameter-problem"}

- name: Accept safe IPv6 ICMP
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    protocol: ipv6-icmp
    icmp_type: "{{ item.type }}"
    comment: "{{ item.comment }}"
    jump: ACCEPT
    ip_version: ipv6
  loop:
    - {type: "1", comment: "ICMP Destination Unreachable"}
    - {type: "2", comment: "ICMP Packet Too Big"}
    - {type: "3", comment: "ICMP Time Exceeded"}
    - {type: "4", comment: "ICMP Parameter Problem"}
    - {type: "135", comment: "ICMP Neighbor Solicitation"}
    - {type: "136", comment: "ICMP Neighbor Advertisement"}
    - {type: "137", comment: "ICMP Redirect Message"}
    - {type: "141",
       comment: "ICMP Inverse Neighbor Discovery Solicitation Message"}
    - {type: "142",
       comment: "ICMP Inverse Neighbor Discovery Advertisement Message"}
    - {type: "148", comment: "ICMP Certification Path Solicitation Message"}
    - {type: "149", comment: "ICMP Certification Path Advertisement Message"}
    - {type: "128", comment: "ICMP Echo Request"}
#
- name: Allow UDP traceroute
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    protocol: udp
    destination_port: "33434:33534"
    jump: REJECT
    reject_with: "{{ item.with }}"
    ip_version: "{{ item.version }}"
  loop:
    - {version: "ipv4", with: "icmp-port-unreachable"}
    - {version: "ipv6", with: "icmp6-port-unreachable"}

- name: Allow ssh
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    protocol: tcp
    destination_port: "22"
    jump: ACCEPT
    ip_version: "{{ item }}"
  loop:
    - ipv4
    - ipv6

- name: DROP
  ansible.builtin.iptables:
    table: filter
    chain: INPUT
    jump: DROP
    ip_version: "{{ item }}"
  loop:
    - ipv4
    - ipv6

# Docker firewall
- name: Flush DOCKER-USER chain
  ansible.builtin.iptables:
    table: filter
    chain: DOCKER-USER
    flush: "yes"
    ip_version: "{{ item }}"
  loop:
    - ipv4
    - ipv6

- name: Allow establised and related connections
  ansible.builtin.iptables:
    table: filter
    chain: DOCKER-USER
    in_interface: eth0
    ctstate:
      - RELATED
      - ESTABLISHED
    jump: RETURN
    ip_version: "{{ item }}"
  loop:
    - ipv4
    - ipv6

- name: Open docker ports v4
  shell: "/usr/sbin/iptables \
  -A DOCKER-USER \
  -i eth0 \
  -p tcp -m tcp \
  -m conntrack --ctorigdstport {{ item }} --ctdir ORIGINAL \
  -j RETURN"
  loop:
    - 80
    - 443

- name: Open docker ports v6
  shell: "/usr/sbin/ip6tables \
  -A DOCKER-USER \
  -i eth0 \
  -p tcp -m tcp \
  -m conntrack --ctorigdstport {{ item }} --ctdir ORIGINAL \
  -j RETURN"
  loop:
    - 80
    - 443

- name: Drop everything from the world to docker
  ansible.builtin.iptables:
    table: filter
    chain: DOCKER-USER
    in_interface: eth0
    jump: DROP
    ip_version: "{{ item }}"
  loop:
    - ipv4
    - ipv6

- name: Pass along internal trafic to docker
  ansible.builtin.iptables:
    table: filter
    chain: DOCKER-USER
    jump: RETURN
    ip_version: "{{ item }}"
  loop:
    - ipv4
    - ipv6

- name: Save iptables
  shell: "iptables-save > /etc/iptables/rules.v4"
- name: Save ip6tables
  shell: "ip6tables-save > /etc/iptables/rules.v6"
